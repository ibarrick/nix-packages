syntax on
set tabstop=4
set shiftwidth=4
set encoding=UTF-8
set updatetime=300
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

autocmd BufWritePre *.clj %s/\s\+$//e
autocmd BufWritePre *.tsx %s/\s\+$//e
autocmd BufWritePre *.ts %s/\s\+$//e
autocmd BufWritePre *.js %s/\s\+$//e

set clipboard^=unnamed,unnamedplus
let mapleader = "\<Space>"
let maplocalleader = ","
nnoremap <silent> <Leader>s :split<CR>
nnoremap <silent> <Leader>v :vsplit<CR>
nnoremap <silent> <Leader><Tab> :wincmd w<CR>
nnoremap <silent> <C-p> :FZF<CR>
nnoremap <silent> <C-f> :Rg<CR>
nnoremap <silent> <C-b> :Buffers<CR>
nnoremap <silent> <Leader>gg :LazyGit<CR>
nnoremap <silent> <C-y> :FloatermToggle build<CR>
tnoremap <C-y> <C-\><C-n>:FloatermToggle build<CR>
set nocompatible
filetype plugin on
let g:clojure_maxlines = 1200
let g:pencil#map#suspend_af = 'K'
let g:goyo_width = 110
let g:pencil#textwidth = 100    
let g:vimwiki_list = [{'path': '~/vimwiki/',
                          \ 'syntax': 'markdown', 'ext': '.md'}]
let g:GPGFilePattern = '*.\(gpg\|asc\|pgp\)\(.wiki\)\='
set backspace=indent,eol,start 
set redrawtime=10000
set splitright
let g:deoplete#enable_at_startup = 1
let g:codedark_transparent=1
colorscheme codedark
let g:conjure#extract#tree_sitter#enabled = v:true
let g:sexp_mappings = {
          \ 'sexp_capture_next_element': '<Leader>>',
          \ 'sexp_emit_tail_element': '<Leader><',
        \ }
nnoremap <silent> <Leader>a :A<CR>
let g:coc_root_patterns = ['.']
nnoremap <C-n> :NERDTreeToggle<CR>

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<Leader>n'           " replace C-n
let g:VM_maps['Find Subword Under'] = '<Leader>n'           " replace visual C-n
let g:VM_maps["Add Cursor Down"] = '<Leader>j'      " start selecting down
let g:VM_maps["Add Cursor Up"] = '<Leader>k'      " start selecting down
let g:airline_powerline_fonts = 1
nmap <silent> <Leader>gd <Plug>(coc-definition)
nmap <silent> <Leader>gy <Plug>(coc-type-definition)
nmap <silent> <Leader>gi <Plug>(coc-implementation)
nmap <silent> <Leader>gr <Plug>(coc-references)
nmap <silent> <Leader>ca <Plug>(coc-codeaction)
nmap <silent> <Leader>cn <Plug>(coc-diagnostic-next)

nnoremap <silent> <Leader><Leader>p :CocCommand<CR>

nnoremap <silent> <C-d> :Clap coc_diagnostics<CR>
nnoremap <silent> <C-]> :Clap coc_symbols<CR>
nnoremap <silent> <C-u> :Clap coc_outline<CR>

nmap <silent> <Leader><Leader>jd <Plug>(jsdoc)


nnoremap <silent> <Leader>r :ConjureEval (reloaded.repl/reset)<CR>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nnoremap <silent> <C-l> :nohl<CR><C-l>
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
set termguicolors

let g:GPGDefaultRecipients = ['ibarrick']

nnoremap <silent> <LocalLeader>ca :CodeCompanionActions<CR>

lua <<EOF
require("bufferline").setup{
  options = {
          separator_style = "", -- thin
          themable = true
  },
  highlights = {
          fill = { bg = "#000000" },
          separator = { fg = "#000000" },
          separator_selected = { fg = "#000000" },
  }
}

require("hop").setup{

}


local Input = require("nui.input")
local event = require("nui.utils.autocmd").event

local function prompt_input(opts)
    opts = opts or {}
    local result = nil
    local input = Input({
        position = opts.position or "50%",
        size = {
            width = opts.width or 20,
        },
        border = {
            style = opts.border_style or "single",
            text = {
                top = opts.title or "[Input]",
                top_align = "center",
            },
        },
        win_options = {
            winhighlight = opts.winhighlight or "Normal:Normal,FloatBorder:Normal",
        },
    }, {
        prompt = opts.prompt or "> ",
        default_value = opts.default_value or "",
        on_close = function()
            if opts.on_close then
                opts.on_close()
            end
        end,
        on_submit = function(value)
            result = value
            if opts.on_submit then
                opts.on_submit(value)
            end
        end,
    })

    input:mount()

    input:on(event.BufLeave, function()
        input:unmount()
    end)

    -- Wait for the input to be submitted
    vim.wait(10000, function()
        return result ~= nil
    end, 100)

    return result
end

require("codecompanion").setup({
	strategies = {
		chat = {
			adapter = "anthropic",
		},
		agent = {
			adapter = "anthropic",
		},
		inline = {
			adapter = "anthropic",
		},
	},
	opts = {
		log_level = "DEBUG",
	},
	display = {
		action_palette = {
			provider = "telescope",
		},
	},
 	adapters = {
 		anthropic = function()
 			return require("codecompanion.adapters").extend("anthropic", {
 				env = {
					api_key = "cmd:bw get password claude-api --session $(cat /run/secrets/bw-session)"
 				},
				parameters = {
					model = "claude-3-5-sonnet-latest",
				}
 			})
	    end,
 	},
	prompt_library = {
		["Code Snippet"] = {
			strategy = "chat",
			description = "Generate a code snippet with no additional markup or text",
			opts = {
				-- auto_submit = false,
				short_name = "code",
				mapping = "<LocalLeader>cc",
				-- stop_context_insertion = true,
			},
			prompts = {
				{
						role = "system",
						content = "You are a helpful progamming assistant, particularly skilled in Clojure, React, Typescript, and especially material-ui. Respond only in code (not language if it can be helped) and when asked to generate material-ui or react code, always use typescript. Please do not say ANYTHING except providing the code requested. If the query contains the word snippet, do not include any import statements, just the snippet. Please do not generate markdown or any other text that is not code.",
				},
				{
						role = "user",
						content = "",
				},
			},
		},
		["Inline Code Snippet"] = {
			strategy = "inline",
			description = "Generate a code snippet with no additional markup or text",
			opts = {
				-- auto_submit = false,
				short_name = "code",
				mapping = "<LocalLeader>ci",
				-- stop_context_insertion = true,
			},
			prompts = {
				{
						role = "system",
						content = "You are a helpful progamming assistant, particularly skilled in Clojure, React, Typescript, and especially material-ui. Respond only in code (not language if it can be helped) and when asked to generate material-ui or react code, always use typescript. Please do not say ANYTHING except providing the code requested. If the query contains the word snippet, do not include any import statements, just the snippet. Please do not generate markdown or any other text that is not code.",
				},
				{
						role = "user",
						content = "",
				},
			},
		}
	},
})

vim.api.nvim_set_keymap("n", "<LocalLeader>cc", "", {
  callback = function()
    require("codecompanion").prompt("code")
  end,
  noremap = true,
  silent = true,
})

require("dbee").setup({
	sources = {
      require("dbee.sources").MemorySource:new({
        {
          name = "deacom",
          type = "mssql",
		  url = "sqlserver://{{ bw get username Deacom --session $(cat /run/secrets/bw-session) }}:{{ bw get password Deacom --session $(cat /run/secrets/bw-session) }}@localhost",
        },
      }),
	}
})

vim.api.nvim_set_keymap("n", "<LocalLeader>db", "", {
  callback = function()
    require("dbee").open()
  end,
  noremap = true,
  silent = true,
})


require("cheatsheet").setup({
    -- Whether to show bundled cheatsheets

    bundled_cheatsheets = false,

    bundled_plugin_cheatsheets = false,

    -- For bundled plugin cheatsheets, do not show a sheet if you
    -- don't have the plugin installed (searches runtimepath for
    -- same directory name)
    include_only_installed_plugins = true,

    -- Key mappings bound inside the telescope window
    telescope_mappings = {
        ['<CR>'] = require('cheatsheet.telescope.actions').select_or_fill_commandline,
        ['<A-CR>'] = require('cheatsheet.telescope.actions').select_or_execute,
        ['<C-Y>'] = require('cheatsheet.telescope.actions').copy_cheat_value,
        ['<C-E>'] = require('cheatsheet.telescope.actions').edit_user_cheatsheet,
    }
})

EOF
nnoremap <silent><Leader><Leader>l :BufferLineCycleNext<CR>
nnoremap <silent><Leader><Leader>h :BufferLineCyclePrev<CR>
nnoremap <silent><Leader><Leader>d :bd<CR>
nnoremap <silent><Leader><Leader>w :HopWord<CR>

